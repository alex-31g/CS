/*
Сортировка выбором - алгоритм сортировки последовательности данных. 

АЛГОРИТМ:
1) Используя линейный поиск, находим минимальное значение в массиве
2) Найденный элемент меняется местами с первым элементом 
3) Используя линейный поиск, находим минимальное значение в массиве (теперь от второго элемента до последнего)
4) Найденный элемент меняется местами со вторым элементом 
5) Операции нахождения минимального значения в оставшихся частях массива и перестановка элементов повторяются до тех пор, пока все числа не будут полность отсортированы 

ПРИМЕР:
[ 6, 7, 1, 8, 9, 3, 5, 4, 2 ]     <-- исходный массив

[ 6, 7, (1), 8, 9, 3, 5, 4, 2 ]   <-- 1 минимальное значение
[ (1), 7, 6, 8, 9, 3, 5, 4, 2 ]   <-- 1 ставим на первое место, а элемент, который занимал первое место - на место 1
1, [ 7, 6, 8, 9, 3, 5, 4, (2) ]   <-- новый круг поиска по оставшейся части массива - 2 минимальное значение
1, [ (2), 6, 8, 9, 3, 5, 4, 7 ]   <-- 2 ставим на первое место, а элемент, который занимал первое место - на место 2
                                  <-- и так далее, пока все числа не будут полность отсортированы

Временная сложность - O(N^2).
*/

// ======================
// В порядке возростания
// ======================

const arr = [ 6, 7, 1, 1, -8, 9, 3, -8, 6, -5, 4, 2, 1 ];
let count = 0;

function selectionSort(arr) {
	for (let i = 0; i < arr.length; i++) {
		let min = arr[i];
		for (let j = 1 + i; j < arr.length; j++) {
			count++;
			if (arr[j] < min) {
				arr[i] = arr[j]
				arr[j] = min;
				min = arr[i];
			}
		}
	}
	return arr;
}

console.log(selectionSort(arr));
console.log(count);

// ===================
// В порядке убывания
// ===================
